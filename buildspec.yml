version: 0.2

env:
  variables:
    cluster: "viper"
    ECR_URL: "378582414855.dkr.ecr.eu-central-1.amazonaws.com"
 

phases:
  install:
    commands:
  #    - npm install -g node
    # - curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/aws-iam-authenticator
    # - chmod +x ./aws-iam-authenticator
    # - mkdir -p ~/bin && cp ./aws-iam-authenticator ~/bin/aws-iam-authenticator && export PATH=~/bin:$PATH
    # - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    # - chmod +x kubectl
    # - mv ./kubectl /usr/local/bin/kubectl

      - wget https://storage.googleapis.com/kubernetes-helm/helm-v2.14.0-linux-amd64.tar.gz -O helm.tar.gz; tar -xzf helm.tar.gz
      - chmod +x ./linux-amd64/helm
      - mv ./linux-amd64/helm /usr/local/bin/helm
  pre_build:
    commands:
      # Set app name and app version
      - export APP_VERSION=$(node -p "require('./package.json').version")      
      - export APP_NAME=$(node -p "require('./package.json').name")    
      
  build:
    commands:
      - npm build
  post_build:
    commands:
      - echo Entered ECS phase...

      - aws ecr get-login-password --region eu-central-1 | docker login --username AWS  --password-stdin ${ECR_URL}

      - aws ecr describe-repositories --repository-names ${cluster}/${APP_NAME} || aws ecr create-repository --repository-name ${cluster}/${APP_NAME}

      - docker build -t ${APP_NAME} .

      - docker tag ${APP_NAME}:latest ${ECR_URL}/${cluster}/${APP_NAME}:latest

      - docker tag ${APP_NAME} ${ECR_URL}/${cluster}/${APP_NAME}:${APP_VERSION}

      - docker push ${ECR_URL}/${cluster}/${APP_NAME}

      - echo ECS phase completed.

      - echo Entered EKS phase...

      - aws sts get-caller-identity

      - aws eks --region eu-central-1 update-kubeconfig --name viper-eks-cluster 

      #- kubectl -n kube-system delete deployment tiller-deploy 
      
      #- kubectl -n kube-system delete service/tiller-deploy

      - kubectl -n kube-system get deployment
      
      - helm init

      - cd helm && helm install ${APP_NAME} . --set image.repository=${ECR_URL}/${cluster}/${APP_NAME}:latest --set image.tag=latest 

     

artifacts:
  files:
    - '**/*'
  base-directory: dist